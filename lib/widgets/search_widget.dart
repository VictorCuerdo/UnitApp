// ignore_for_file: library_private_types_in_public_api

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';

class SearchWidget extends StatefulWidget {
  final VoidCallback onClose; // Callback to close the search widget

  const SearchWidget({Key? key, required this.onClose}) : super(key: key);

  @override
  _SearchWidgetState createState() => _SearchWidgetState();
}

class _SearchWidgetState extends State<SearchWidget> {
  static const double smallFontSize = 14.0;
  static const double mediumFontSize = 17.0;
  static const double largeFontSize = 20.0;
  Locale _selectedLocale = const Locale('en', 'US');
  double fontSize = mediumFontSize;
  bool get isDarkMode => Theme.of(context).brightness == Brightness.dark;
  String _searchQuery = "";
  final Map<String, String> _navigationMap = {
    'Settings': '/settings',
    // Add all other navigation options here
    'Distance': '/distance',
    'Picometers': '/distance',
    'pm': '/distance',
    'Nanometers': '/distance',
    'nm': '/distance',
    'Micrometers': '/distance',
    'µm': '/distance',
    'Millimeters': '/distance',
    'mm': '/distance',
    'Centimeters': '/distance',
    'cm': '/distance',
    'Meters': '/distance',
    'm': '/distance',
    'Kilometers': '/distance',
    'km': '/distance',
    'Angstrom': '/distance',
    'Å': '/distance',
    'Thou': '/distance',
    'thou': '/distance',
    'Inches': '/distance',
    'in': '/distance',
    'Feet': '/distance',
    'ft': '/distance',
    'Yards': '/distance',
    'yd': '/distance',
    'Chains': '/distance',
    'ch': '/distance',
    'Furlongs': '/distance',
    'fur': '/distance',
    'Miles': '/distance',
    'mi': '/distance',
    'Fathoms': '/distance',
    'fth': '/distance',
    'Cables': '/distance',
    'cable': '/distance',
    'Nautical miles': '/distance',
    'NM': '/distance',
    'Astronomical units': '/distance',
    'au': '/distance',
    'Light years': '/distance',
    'ly': '/distance',
    'Parsecs': '/distance',
    'pc': '/distance',
    'Area': '/area',
    'Square Metres': '/area',
    'm²': '/area',
    'Square Millimetres': '/area',
    'mm²': '/area',
    'Square Centimetres': '/area',
    'cm²': '/area',
    'Ares': '/area',
    'a': '/area',
    'Hectares': '/area',
    'ha': '/area',
    'Square Kilometres': '/area',
    'km²': '/area',
    'Square Inches': '/area',
    'in²': '/area',
    'Square Feet': '/area',
    'ft²': '/area',
    'Square Yards': '/area',
    'yd²': '/area',
    'Acres': '/area',
    'ac': '/area',
    'Square Miles': '/area',
    'mi²': '/area',
    'Volume': '/volume',
    'Cubic Centimetres': '/volume',
    'cm³': '/volume',
    'Millilitres': '/volume',
    'mL': '/volume',
    'Litres': '/volume',
    'L': '/volume',
    'Cubic Decimetres': '/volume',
    'dm³': '/volume',
    'Hectolitres': '/volume',
    'hL': '/volume',
    'Cubic Metres': '/volume',
    'm³': '/volume',
    'Cubic Inches': '/volume',
    'in³': '/volume',
    'Cubic Feet': '/volume',
    'ft³': '/volume',
    'Cubic Yards': '/volume',
    'yd³': '/volume',
    'Teaspoons (lmp)': '/volume',
    'tsp (lmp)': '/volume',
    'Tablespoons (lmp)': '/volume',
    'tbsp (lmp)': '/volume',
    'Fluid Ounces (lmp)': '/volume',
    'fl oz (lmp)': '/volume',
    'Cups (lmp)': '/volume',
    'cup (lmp)': '/volume',
    'Pints (lmp)': '/volume',
    'pt (lmp)': '/volume',
    'Quarts (lmp)': '/volume',
    'qt (lmp)': '/volume',
    'Gallons (lmp)': '/volume',
    'gal (lmp)': '/volume',
    'Teaspoons (US)': '/volume',
    'tsp (US)': '/volume',
    'Tablespoons (US)': '/volume',
    'tbsp (US)': '/volume',
    'Fluid Ounces (US)': '/volume',
    'fl oz (US)': '/volume',
    'Cups (US)': '/volume',
    'cup (US)': '/volume',
    'Pints (US)': '/volume',
    'pt (US)': '/volume',
    'Quarts (US)': '/volume',
    'qt (US)': '/volume',
    'Gallons (US)': '/volume',
    'gal (US)': '/volume',
    'Barrels': '/volume',
    'bbl': '/volume',
    'Power': '/power',
    'Watts': '/power',
    'W': '/power',
    'Kilowatts': '/power',
    'kW': '/power',
    'Megawatts': '/power',
    'MW': '/power',
    'Gigawatts': '/power',
    'GW': '/power',
    'Joules per Hour': '/power',
    'J/h': '/power',
    'Kilojoules per Hour': '/power',
    'kJ/h': '/power',
    'Calories per Second': '/power',
    'cal/s': '/power',
    'Calories per Hour': '/power',
    'cal/h': '/power',
    'Kilocalories per Second': '/power',
    'kcal/s': '/power',
    'Kilocalories per Hour': '/power',
    'kcal/h': '/power',
    'Horsepowers (Mechanical)': '/power',
    'hp': '/power',
    'Horsepowers (Metric)': '/power',
    'hp(M)': '/power',
    'British Thermal Units per Hour': '/power',
    'BTU/h': '/power',
    'Foot-pounds Force Per Second': '/power',
    'ft·lbf/s': '/power',
    'Angle': '/angle',
    'Degrees': '/angle',
    '°': '/angle',
    'Radians': '/angle',
    'rad': '/angle',
    'Gradians': '/angle',
    'grad': '/angle',
    'Minutes of arc': '/angle',
    '′': '/angle',
    'Seconds of arc': '/angle',
    '″': '/angle',
    'Turns': '/angle',
    'turn': '/angle',
    'Revolutions': '/angle',
    'rev': '/angle',
    'Circles': '/angle',
    'circ': '/angle',
    'Quadrants': '/angle',
    'Sextants': '/angle',
    'Octants': '/angle',
    'Signs': '/angle',
    'Binary degrees': '/angle',
    'Milliradians': '/angle',
    'mrad': '/angle',
    'Mils (NATO)': '/angle',
    'mil': '/angle',
    'Data Sizes': '/data',
    'Bytes': '/data',
    'B': '/data',
    'Kibibytes': '/data',
    'KiB': '/data',
    'Mebibytes': '/data',
    'MiB': '/data',
    'Gigibytes': '/data',
    'GiB': '/data',
    'Tebibytes': '/data',
    'TiB': '/data',
    'Pebibytes': '/data',
    'PiB': '/data',
    'Kilobytes': '/data',
    'KB': '/data',
    'Megabytes': '/data',
    'MB': '/data',
    'Gigabytes': '/data',
    'GB': '/data',
    'Terabytes': '/data',
    'TB': '/data',
    'Petabytes': '/data',
    'PB': '/data',
    'Bits': '/data',
    'b': '/data',
    'Kibibits': '/data',
    'Kib': '/data',
    'Mebibits': '/data',
    'Mib': '/data',
    'Gigibits': '/data',
    'Gib': '/data',
    'Energy': '/energy',
    'Nanojoules': '/energy',
    'nJ': '/energy',
    'Microjoules': '/energy',
    'µJ': '/energy',
    'Millijoules': '/energy',
    'mJ': '/energy',
    'Joules': '/energy',
    'J': '/energy',
    'Kilojoules': '/energy',
    'kJ': '/energy',
    'Megajoules': '/energy',
    'MJ': '/energy',
    'Newton-metres': '/energy',
    'N⋅m': '/energy',
    'Watt-hours': '/energy',
    'Wh': '/energy',
    'Kilowatt-hours': '/energy',
    'kW⋅h': '/energy',
    'Megawatt-hours': '/energy',
    'MWh': '/energy',
    'Calories': '/energy',
    'cal': '/energy',
    'Kilocalories': '/energy',
    'kcal': '/energy',
    'Foot-pounds Force': '/energy',
    'ft⋅lbf': '/energy',
    'British Thermal Units (ISO)': '/energy',
    'BTU': '/energy',
    'Therms': '/energy',
    'thm': '/energy',
    'Horsepower Hours': '/energy',
    'hp⋅h': '/energy',
    'Barrels of Oil Equivalent': '/energy',
    'BOE': '/energy',
    'Tonnes of Oil Equivalent': '/energy',
    'toe': '/energy',
    'Tonnes of TNT': '/energy',
    'ton of TNT': '/energy',
    'Kilotonnes of TNT': '/energy',
    'KT TNT': '/energy',
    'Megatonnes of TNT': '/energy',
    'MT TNT': '/energy',
    'Ergs': '/energy',
    'erg': '/energy',
    'Electronvolt': '/energy',
    'eV': '/energy',
    'Kiloelectronvolt': '/energy',
    'keV': '/energy',
    'Megaelectronvolt': '/energy',
    'MeV': '/energy',
    'Gigaelectronvolt': '/energy',
    'GeV': '/energy',
    'Force': '/force',
    'Micronewton': '/force',
    'µN': '/force',
    'Millinewton': '/force',
    'mN': '/force',
    'Newton': '/force',
    'N': '/force',
    'Kilonewton': '/force',
    'kN': '/force',
    'Meganewton': '/force',
    'MN': '/force',
    'Ponds': '/force',
    'p': '/force',
    'Kiloponds': '/force',
    'kp': '/force',
    'Megaponds': '/force',
    'Mp': '/force',
    'Gram-force': '/force',
    'gf': '/force',
    'Kilogram-force': '/force',
    'kgf': '/force',
    'Tonne-force': '/force',
    'tf': '/force',
    'Pound-force': '/force',
    'lbf': '/force',
    'Long Ton-force (lmp)': '/force',
    'lmp tf': '/force',
    'Short Ton-force (Us)': '/force',
    'sh tf': '/force',
    'Dyne': '/force',
    'dyn': '/force',
    'Poundal': '/force',
    'pdl': '/force',
    'Frequency': '/frequency',
    'Nanohertz': '/frequency',
    'nHz': '/frequency',
    'Microhertz': '/frequency',
    'µHz': '/frequency',
    'Millihertz': '/frequency',
    'mHz': '/frequency',
    'Hertz': '/frequency',
    'Hz': '/frequency',
    'Kilohertz': '/frequency',
    'kHz': '/frequency',
    'Megahertz': '/frequency',
    'MHz': '/frequency',
    'Gigahertz': '/frequency',
    'GHz': '/frequency',
    'Cycles per Second': '/frequency',

    'Revolutions per Minute': '/frequency',
    'RPM': '/frequency',
    'Radians per Second': '/frequency',
    'rad/s': '/frequency',
    'Degrees per Second': '/frequency',
    'deg/s': '/frequency',
    'Fuel Consumption': '/fuel',
    'Litres per 100 km': '/fuel',
    'L/100 km': '/fuel',
    'Litres per 100 miles': '/fuel',
    'L/100 mi': '/fuel',
    'Kilometres per Litre': '/fuel',
    'km/L': '/fuel',
    'Kilometres per Gallon (US)': '/fuel',
    'km/gal (US)': '/fuel',
    'Miles per Litre': '/fuel',
    'mi/L': '/fuel',
    'Miles per Gallon (Imp)': '/fuel',
    'mpg (Imp)': '/fuel',
    'Miles per Gallon (US)': '/fuel',
    'mpg (US)': '/fuel',
    'Nautical Miles per Litre': '/fuel',
    'nmi/L': '/fuel',
    'Mass': '/mass',
    'Micrograms': '/mass',
    'µg': '/mass',
    'Milligrams': '/mass',
    'mg': '/mass',
    'Grams': '/mass',
    'g': '/mass',
    'Kilograms': '/mass',
    'kg': '/mass',
    'Tonnes': '/mass',
    't': '/mass',
    'Grains': '/mass',
    'gr': '/mass',
    'Ounces': '/mass',
    'oz': '/mass',
    'Pounds': '/mass',
    'lb': '/mass',
    'Stones': '/mass',
    'st': '/mass',
    'Quarters': '/mass',
    'qr': '/mass',
    'Hundredweight (lmp)': '/mass',
    'cwt (Imp)': '/mass',
    'Hundredweight (US)': '/mass',
    'cwt (US)': '/mass',
    'Long Tons (lmp)': '/mass',
    'long tn': '/mass',
    'Short Tons (US)': '/mass',
    'sh tn': '/mass',
    'Carats': '/mass',
    'ct': '/mass',
    'Troy Ounces': '/mass',
    'oz t': '/mass',
    'Pressure': '/pressure',
    'Micropascals': '/pressure',
    'µPa': '/pressure',
    'Millipascals': '/pressure',
    'mPa': '/pressure',
    'Pascals': '/pressure',
    'Pa': '/pressure',
    'Hectopascals': '/pressure',
    'hPa': '/pressure',
    'Kilopascals': '/pressure',
    'kPa': '/pressure',
    'Megapascals': '/pressure',
    'MPa': '/pressure',
    'Gigapascals': '/pressure',
    'GPa': '/pressure',
    'Atmospheres': '/pressure',
    'atm': '/pressure',
    'Microbars': '/pressure',
    'µbar': '/pressure',
    'Millibars': '/pressure',
    'mbar': '/pressure',
    'Bars': '/pressure',
    'bar': '/pressure',
    'Millitorrs': '/pressure',
    'mTorr': '/pressure',
    'Torrs': '/pressure',
    'Torr': '/pressure',
    'Technical Atmospheres': '/pressure',
    'at': '/pressure',
    'Kilogram-force per Square Centimeter': '/pressure',
    'kgf/cm²': '/pressure',
    'Kilogram-force per Square Meter': '/pressure',
    'kgf/m²': '/pressure',
    'Kiloponds per Square Centimeter': '/pressure',
    'kpond/cm²': '/pressure',
    'Kiloponds per Square Meter': '/pressure',
    'kpond/m²': '/pressure',
    'Pounds per Square Inch': '/pressure',
    'psi': '/pressure',
    'Kilopounds per Square Inch': '/pressure',
    'kip/in²': '/pressure',
    'Megapounds per Square Inch': '/pressure',
    'Mkip/in²': '/pressure',
    'Pounds per Square Foot': '/pressure',
    'psf': '/pressure',
    'Kilopounds per Square Foot': '/pressure',
    'kip/ft²': '/pressure',
    'Megapounds per Square Foot': '/pressure',
    'Mkip/ft²': '/pressure',
    'Millimetres of Mercury (0°C)': '/pressure',
    'mmHg': '/pressure',
    'Inches of Mercury (0°C)': '/pressure',
    'inHg': '/pressure',
    'Millimetres of water column': '/pressure',
    'mmH₂O': '/pressure',
    'Inches of water column': '/pressure',
    'inH₂O': '/pressure',
    'Speed': '/speed',
    'Metres per Second': '/speed',
    'm/s': '/speed',
    'Metres per Hour': '/speed',
    'm/h': '/speed',
    'Kilometres per Second': '/speed',
    'km/s': '/speed',
    'Kilometres per Hour': '/speed',
    'km/h': '/speed',
    'Feet per Second': '/speed',
    'ft/s': '/speed',
    'Miles per Second': '/speed',
    'mi/s': '/speed',
    'Miles per Hour': '/speed',
    'mph': '/speed',
    'Knots': '/speed',
    'kts': '/speed',
    'Temperature': '/temperature',
    'Degrees Celsius': '/temperature',
    '°C': '/temperature',
    'Kelvins': '/temperature',
    'K': '/temperature',
    'Degrees Fahrenheit': '/temperature',
    '°F': '/temperature',
    'Degrees Rankine': '/temperature',
    '°R': '/temperature',
    'Degrees Newton': '/temperature',
    '°N': '/temperature',
    'Degrees Réaumur': '/temperature',
    '°Ré': '/temperature',
    'Degrees Rømer': '/temperature',
    '°Rø': '/temperature',
    'Degrees Delisle': '/temperature',
    '°De': '/temperature',
    'Time': '/time',
    'Microseconds': '/time',
    'µs': '/time',
    'Milliseconds': '/time',
    'ms': '/time',
    'Seconds': '/time',
    's': '/time',
    'Minutes': '/time',
    'min': '/time',
    'Hours': '/time',
    'h': '/time',
    'Days': '/time',
    'd': '/time',
    'Weeks': '/time',
    'wk': '/time',
    'Years': '/time',
    'yr': '/time',
    'Torque': '/torque',
    'Micronewton Meter': '/torque',
    'µNm': '/torque',
    'Millinewton Meter': '/torque',
    'mNm': '/torque',
    'Newton Meter': '/torque',
    'Nm': '/torque',
    'Kilonewton Meter': '/torque',
    'kNm': '/torque',
    'Meganewton Meter': '/torque',
    'MNm': '/torque',
    'Newton Centimeter': '/torque',
    'Ncm': '/torque',
    'Newton Millimeter': '/torque',
    'Nmm': '/torque',
    'Gram-force Meter': '/torque',
    'gf·m': '/torque',
    'Gram-force Centimeter': '/torque',
    'gf·cm': '/torque',
    'Gram-force Millimeter': '/torque',
    'gf·mm': '/torque',
    'Kilogram-force Meter': '/torque',
    'kgf·m': '/torque',
    'Kilogram-force Centimeter': '/torque',
    'kgf·cm': '/torque',
    'Kilogram-force Millimeter': '/torque',
    'kgf·mm': '/torque',
    'Dyne Meter': '/torque',
    'dyn·m': '/torque',
    'Dyne Centimeter': '/torque',
    'dyn·cm': '/torque',
    'Dyne Millimeter': '/torque',
    'dyn·mm': '/torque',
    'Pound-force Foot': '/torque',
    'lbf·ft': '/torque',
    'Pound-force Inch': '/torque',
    'lbf·in': '/torque',
    'Ounce-force Foot': '/torque',
    'ozf·ft': '/torque',
    'Ounce-force Inch': '/torque',
    'ozf·in': '/torque',
  };

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: <Widget>[
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Row(
            children: [
              Expanded(
                child: TextField(
                  onChanged: (value) {
                    setState(() {
                      _searchQuery = value;
                    });
                  },
                  decoration: InputDecoration(
                    enabledBorder: const OutlineInputBorder(
                        borderRadius: BorderRadius.all(Radius.circular(4.0))),
                    alignLabelWithHint: true,
                    hintText: 'Type Magnitude/Unit/Symbol'.tr(),
                    border: const OutlineInputBorder(),
                    filled: true,
                    fillColor: Colors.white,
                    prefixIcon: const Icon(Icons.search),
                  ),
                ),
              ),
              IconButton(
                icon: Icon(Icons.close,
                    color: isDarkMode ? Colors.red : Colors.black, size: 23),
                onPressed: widget.onClose, // Call the onClose callback
              ),
            ],
          ),
        ),
        Expanded(
          child: Padding(
            padding: EdgeInsets.only(
                top: 0,
                left: MediaQuery.of(context).size.width * 0.02,
                right: MediaQuery.of(context).size.width * 0.14),
            child: ClipRRect(
              borderRadius: const BorderRadius.all(
                  Radius.circular(10)), // Set border radius
              child: Container(
                color: Colors
                    .white, // Set the background color of the container to black
                child: SingleChildScrollView(
                  child: Column(
                    children: _navigationMap.keys
                        .where((key) => key
                            .toLowerCase()
                            .contains(_searchQuery.toLowerCase()))
                        .map((key) => ListTile(
                              title: Text(key.tr(),
                                  style: const TextStyle(
                                    fontFamily: 'Nunito',
                                    fontWeight: FontWeight.w500,
                                    fontSize: 18,
                                    color: Colors
                                        .black, // Set the text color to white
                                  ),
                                  textAlign: TextAlign.center),
                              onTap: () {
                                Navigator.of(context)
                                    .pushNamed(_navigationMap[key]!);
                              },
                            ))
                        .toList(),
                  ),
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }
}
